{"version":3,"sources":["./src/playground/with-layout/oauth2-password/oauth2-password.module.ts","./src/playground/with-layout/oauth2-password/oauth2-password-login.component.ts","./src/playground/with-layout/oauth2-password/oauth2-password-login.component.html","./src/playground/with-layout/oauth2-password/oauth2-password-routing.module.ts"],"names":[],"mappings":"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","file":"oauth2-password-oauth2-password-module.js","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport {\n  NbAlertModule, NbCardModule, NbInputModule, NbLayoutModule,\n} from '@nebular/theme';\n\nimport {\n  NbAuthModule,\n  NbAuthOAuth2JWTToken,\n  NbOAuth2AuthStrategy,\n  NbOAuth2ClientAuthMethod,\n  NbOAuth2GrantType,\n} from '@nebular/auth';\n\nimport { OAuth2PasswordLoginComponent } from './oauth2-password-login.component';\nimport { Oauth2PasswordRoutingModule } from './oauth2-password-routing.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n\n    NbAuthModule.forRoot({\n      forms: {\n        login: {\n          redirectDelay: 3000,\n          showMessages : {\n            error: true,\n            success: false,\n          },\n          strategy: 'password',\n        },\n      },\n      strategies: [\n         NbOAuth2AuthStrategy.setup({\n          name: 'password',\n          clientId: 'Aladdin',\n          clientSecret: 'open sesame',\n          clientAuthMethod: NbOAuth2ClientAuthMethod.BASIC,\n          baseEndpoint: 'http://localhost:4400/api/auth/',\n          token: {\n            endpoint: 'token',\n            grantType: NbOAuth2GrantType.PASSWORD,\n            class: NbAuthOAuth2JWTToken,\n            requireValidToken: true,\n          },\n          redirect: {\n            success: '/oauth2-password',\n          },\n        }),\n      ],\n    }),\n\n    NbCardModule,\n    NbLayoutModule,\n    NbAlertModule,\n    NbInputModule,\n    Oauth2PasswordRoutingModule,\n  ],\n  declarations: [\n    OAuth2PasswordLoginComponent,\n  ],\n})\nexport class OAuth2PasswordPlaygroundModule {\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  NbAuthResult,\n  NbAuthService,\n  NB_AUTH_OPTIONS,\n  nbAuthCreateToken,\n  NbAuthJWTToken,\n  NbAuthOAuth2Token,\n} from '@nebular/auth';\nimport { getDeepFromObject } from '../../../framework/auth/helpers';\n\n@Component({\n  selector: 'nb-playground-auth',\n  templateUrl: './oauth2-password-login.component.html',\n  styleUrls: ['./oauth2-password-login.component.scss'],\n})\nexport class OAuth2PasswordLoginComponent {\n\n  token: NbAuthOAuth2Token;\n  redirectDelay: number = 0;\n  showMessages: any = {};\n  strategy: string = '';\n\n  errors: string[] = [];\n  messages: string[] = [];\n  user: any = {};\n  submitted: boolean = false;\n\n  constructor(private authService: NbAuthService, @Inject(NB_AUTH_OPTIONS) protected options = {},\n              protected router: Router) {\n    this.redirectDelay = this.getConfigValue('forms.login.redirectDelay');\n    this.showMessages = this.getConfigValue('forms.login.showMessages');\n    this.strategy = this.getConfigValue('forms.login.strategy');\n    /**this.authService.onTokenChange()\n      .subscribe((token: NbAuthOAuth2Token) => {\n        this.token = null;\n        if (token && token.isValid()) {\n          this.token = token;\n        }\n      }); **/\n  }\n\n  login(): void {\n\n    this.errors = this.messages = [];\n    this.submitted = true;\n\n    this.authService.authenticate(this.strategy, this.user).subscribe((result: NbAuthResult) => {\n      this.submitted = false;\n      this.token = result.getToken() as NbAuthOAuth2Token;\n      if (result.isSuccess()) {\n        this.messages = result.getMessages();\n      } else {\n        this.errors = result.getErrors();\n      }\n\n      const redirect = result.getRedirect();\n      if (redirect) {\n        setTimeout(() => {\n          return this.router.navigateByUrl(redirect);\n        }, this.redirectDelay);\n      }\n    });\n  }\n\n\n  logout() {\n    this.authService.logout('password')\n      .subscribe((authResult: NbAuthResult) => {\n        this.token = null;\n      });\n  }\n\n  getConfigValue(key: string): any {\n    return getDeepFromObject(this.options, key, null);\n  }\n\n  getClaims(rawToken: string): string {\n    if (!rawToken) {\n      return null;\n    }\n    return nbAuthCreateToken(NbAuthJWTToken, rawToken, this.strategy).getPayload();\n  }\n}\n","<nb-layout>\n  <nb-layout-column>\n    <nb-card *ngIf=\"token\">\n      <nb-card-body><h1 class=\"title\">You are currently authenticated</h1>\n        <p></p>\n        <p>Current User Access Token: {{ token.getValue() | json }}</p>\n        <p>Current User Access Token Payload : {{getClaims(token.getValue()) | json}}</p>\n        <p>Current User Refresh Token: {{ token.getRefreshToken() | json }}</p>\n        <button nbButton status=\"warning\" *ngIf=\"token\" (click)=\"logout()\">Sign Out</button>\n      </nb-card-body>\n      <nb-card-body *ngIf=\"! token\"><p>No User Authenticated</p></nb-card-body>\n    </nb-card>\n    <nb-card *ngIf=\"!token\">\n      <nb-card-body>\n        <nb-auth-block aria-labelledby=\"title\">\n          <h1 id=\"title\" class=\"title\">OAuth2 Sign In with email/password</h1>\n          <p class=\"sub-title\">Hello! Sign in with your username or email</p>\n\n          <nb-alert *ngIf=\"showMessages.error && errors?.length > 0 && !submitted\" outline=\"danger\" role=\"alert\">\n            <p class=\"alert-title\"><b>Oh snap!</b></p>\n            <ul class=\"alert-message-list\">\n              <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n            </ul>\n          </nb-alert>\n\n          <nb-alert *ngIf=\"showMessages.success && messages?.length > 0 && !submitted\" outline=\"success\" role=\"alert\">\n            <p class=\"alert-title\"><b>Hooray!</b></p>\n            <ul class=\"alert-message-list\">\n              <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n            </ul>\n          </nb-alert>\n\n          <form (ngSubmit)=\"login()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n            <div class=\"form-control-group\">\n              <label class=\"label\" for=\"input-email\">Email address:</label>\n              <input nbInput\n                     fullWidth\n                     [(ngModel)]=\"user.email\"\n                     #email=\"ngModel\"\n                     name=\"email\"\n                     id=\"input-email\"\n                     pattern=\".+@.+..+\"\n                     placeholder=\"Email address\"\n                     autofocus\n                     [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n                     [required]=\"getConfigValue('forms.validation.email.required')\"\n                     [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n              <ng-container *ngIf=\"email.invalid && email.touched\">\n                <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n                  Email is required!\n                </p>\n                <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n                  Email should be the real one!\n                </p>\n              </ng-container>\n            </div>\n\n            <div class=\"form-control-group\">\n              <label class=\"label\" for=\"input-password\">Password:</label>\n              <input nbInput\n                     fullWidth\n                     [(ngModel)]=\"user.password\"\n                     #password=\"ngModel\"\n                     name=\"password\"\n                     type=\"password\"\n                     id=\"input-password\"\n                     placeholder=\"Password\"\n                     [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n                     [required]=\"getConfigValue('forms.validation.password.required')\"\n                     [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n                     [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n                     [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n              <ng-container *ngIf=\"password.invalid && password.touched \">\n                <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n                  Password is required!\n                </p>\n                <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n                  Password should contains\n                  from {{ getConfigValue('forms.validation.password.minLength') }}\n                  to {{ getConfigValue('forms.validation.password.maxLength') }}\n                  characters\n                </p>\n              </ng-container>\n            </div>\n\n            <button nbButton\n                    fullWidth\n                    status=\"success\"\n                    [disabled]=\"submitted || !form.valid\"\n                    [class.btn-pulse]=\"submitted\">\n              Sign In\n            </button>\n          </form>\n        </nb-auth-block>\n      </nb-card-body>\n    </nb-card>\n  </nb-layout-column>\n</nb-layout>\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Route} from '@angular/router';\nimport { OAuth2PasswordLoginComponent } from './oauth2-password-login.component';\n\nconst routes: Route[] = [\n  {\n    path: '',\n    component: OAuth2PasswordLoginComponent,\n  },\n];\n\n@NgModule({\n  imports: [ RouterModule.forChild(routes) ],\n  exports: [ RouterModule ],\n})\nexport class Oauth2PasswordRoutingModule {}\n"],"sourceRoot":"webpack:///"}