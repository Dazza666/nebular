{"version":3,"sources":["./src/framework/auth/strategies/password/password-strategy.ts","./src/framework/auth/auth.options.ts","./src/framework/auth/components/auth.component.ts","./src/framework/auth/services/token/token.ts","./src/framework/auth/strategies/dummy/dummy-strategy.ts","./src/framework/auth/strategies/oauth2/oauth2-strategy.options.ts","./src/framework/auth/components/reset-password/reset-password.component.ts","./src/framework/auth/components/reset-password/reset-password.component.html","./src/framework/auth/components/register/register.component.ts","./src/framework/auth/components/register/register.component.html","./src/framework/auth/components/logout/logout.component.ts","./src/framework/auth/components/logout/logout.component.html","./src/framework/auth/auth.module.ts","./src/framework/auth/services/auth.service.ts","./src/framework/auth/services/token/token.service.ts","./src/framework/auth/strategies/password/password-strategy-options.ts","./src/framework/auth/services/interceptors/simple-interceptor.ts","./src/framework/auth/components/login/login.component.ts","./src/framework/auth/components/login/login.component.html","./src/framework/auth/components/auth-block/auth-block.component.ts","./src/framework/auth/public_api.ts","./src/framework/auth/components/request-password/request-password.component.ts","./src/framework/auth/components/request-password/request-password.component.html","./src/framework/auth/strategies/auth-strategy-options.ts","./src/framework/auth/auth.routes.ts","./src/framework/auth/services/auth-result.ts","./src/framework/auth/services/interceptors/jwt-interceptor.ts","./src/framework/auth/strategies/oauth2/oauth2-strategy.ts","./src/framework/auth/services/token/token-storage.ts","./src/framework/auth/helpers.ts","./src/framework/auth/strategies/auth-strategy.ts","./src/framework/auth/strategies/dummy/dummy-strategy-options.ts","./src/framework/auth/models/user.ts","./src/framework/auth/services/token/token-parceler.ts"],"names":[],"mappings":"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","file":"default~auth-auth-module~azure-azure-module~firebase-firebase-module~oauth2-oauth2-module~oauth2-pas~b1b2bb03.js","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\n\nimport { NbAuthResult } from '../../services/auth-result';\nimport { NbAuthStrategy } from '../auth-strategy';\nimport { NbAuthStrategyClass } from '../../auth.options';\nimport { NbPasswordAuthStrategyOptions, passwordStrategyOptions } from './password-strategy-options';\nimport { NbAuthIllegalTokenError } from '../../services/token/token';\n\n/**\n * The most common authentication provider for email/password strategy.\n *\n * Strategy settings. Note, there is no need to copy over the whole object to change the settings you need.\n * Also, this.getOption call won't work outside of the default options declaration\n * (which is inside of the `NbPasswordAuthStrategy` class), so you have to replace it with a custom helper function\n * if you need it.\n *\n * ```ts\n *export class NbPasswordAuthStrategyOptions extends NbAuthStrategyOptions {\n *  name: string;\n *  baseEndpoint? = '/api/auth/';\n *  login?: boolean | NbPasswordStrategyModule = {\n *    alwaysFail: false,\n *    endpoint: 'login',\n *    method: 'post',\n *    requireValidToken: true,\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Login/Email combination is not correct, please try again.'],\n *    defaultMessages: ['You have been successfully logged in.'],\n *  };\n *  register?: boolean | NbPasswordStrategyModule = {\n *    alwaysFail: false,\n *    endpoint: 'register',\n *    method: 'post',\n *    requireValidToken: true,\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['You have been successfully registered.'],\n *  };\n *  requestPass?: boolean | NbPasswordStrategyModule = {\n *    endpoint: 'request-pass',\n *    method: 'post',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Reset password instructions have been sent to your email.'],\n *  };\n *  resetPass?: boolean | NbPasswordStrategyReset = {\n *    endpoint: 'reset-pass',\n *    method: 'put',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    resetPasswordTokenKey: 'reset_password_token',\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Your password has been successfully changed.'],\n *  };\n *  logout?: boolean | NbPasswordStrategyReset = {\n *    alwaysFail: false,\n *    endpoint: 'logout',\n *    method: 'delete',\n *    redirect: {\n *      success: '/',\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['You have been successfully logged out.'],\n *  };\n *  refreshToken?: boolean | NbPasswordStrategyModule = {\n *    endpoint: 'refresh-token',\n *    method: 'post',\n *    requireValidToken: true,\n *    redirect: {\n *      success: null,\n *      failure: null,\n *    },\n *    defaultErrors: ['Something went wrong, please try again.'],\n *    defaultMessages: ['Your token has been successfully refreshed.'],\n *  };\n *  token?: NbPasswordStrategyToken = {\n *    class: NbAuthSimpleToken,\n *    key: 'data.token',\n *    getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n *      res.body,\n *      options.token.key,\n *    ),\n *  };\n *  errors?: NbPasswordStrategyMessage = {\n *    key: 'data.errors',\n *    getter: (module: string, res: HttpErrorResponse, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n *      res.error,\n *      options.errors.key,\n *      options[module].defaultErrors,\n *    ),\n *  };\n *  messages?: NbPasswordStrategyMessage = {\n *    key: 'data.messages',\n *    getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n *      res.body,\n *      options.messages.key,\n *      options[module].defaultMessages,\n *    ),\n *  };\n *  validation?: {\n *    password?: {\n *      required?: boolean;\n *      minLength?: number | null;\n *      maxLength?: number | null;\n *      regexp?: string | null;\n *    };\n *    email?: {\n *      required?: boolean;\n *      regexp?: string | null;\n *    };\n *    fullName?: {\n *      required?: boolean;\n *      minLength?: number | null;\n *      maxLength?: number | null;\n *      regexp?: string | null;\n *    };\n *  };\n *}\n * ```\n */\n@Injectable()\nexport class NbPasswordAuthStrategy extends NbAuthStrategy {\n\n  protected defaultOptions: NbPasswordAuthStrategyOptions = passwordStrategyOptions;\n\n  static setup(options: NbPasswordAuthStrategyOptions): [NbAuthStrategyClass, NbPasswordAuthStrategyOptions] {\n    return [NbPasswordAuthStrategy, options];\n  }\n\n  constructor(protected http: HttpClient, private route: ActivatedRoute) {\n    super();\n  }\n\n  authenticate(data?: any): Observable<NbAuthResult> {\n    const module = 'login';\n    const method = this.getOption(`${module}.method`);\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n    return this.http.request(method, url, {body: data, observe: 'response'})\n      .pipe(\n        map((res) => {\n          if (this.getOption(`${module}.alwaysFail`)) {\n            throw this.createFailResponse(data);\n          }\n          return res;\n        }),\n        map((res) => {\n          return new NbAuthResult(\n            true,\n            res,\n            this.getOption(`${module}.redirect.success`),\n            [],\n            this.getOption('messages.getter')(module, res, this.options),\n            this.createToken(this.getOption('token.getter')(module, res, this.options), requireValidToken));\n        }),\n        catchError((res) => {\n          return this.handleResponseError(res, module);\n        }),\n      );\n  }\n\n  register(data?: any): Observable<NbAuthResult> {\n    const module = 'register';\n    const method = this.getOption(`${module}.method`);\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n    return this.http.request(method, url, {body: data, observe: 'response'})\n      .pipe(\n        map((res) => {\n          if (this.getOption(`${module}.alwaysFail`)) {\n            throw this.createFailResponse(data);\n          }\n\n          return res;\n        }),\n        map((res) => {\n          return new NbAuthResult(\n            true,\n            res,\n            this.getOption(`${module}.redirect.success`),\n            [],\n            this.getOption('messages.getter')(module, res, this.options),\n            this.createToken(this.getOption('token.getter')('login', res, this.options), requireValidToken));\n        }),\n        catchError((res) => {\n          return this.handleResponseError(res, module);\n        }),\n      );\n  }\n\n  requestPassword(data?: any): Observable<NbAuthResult> {\n    const module = 'requestPass';\n    const method = this.getOption(`${module}.method`);\n    const url = this.getActionEndpoint(module);\n    return this.http.request(method, url, {body: data, observe: 'response'})\n      .pipe(\n        map((res) => {\n          if (this.getOption(`${module}.alwaysFail`)) {\n            throw this.createFailResponse();\n          }\n\n          return res;\n        }),\n        map((res) => {\n          return new NbAuthResult(\n            true,\n            res,\n            this.getOption(`${module}.redirect.success`),\n            [],\n            this.getOption('messages.getter')(module, res, this.options));\n        }),\n        catchError((res) => {\n        return this.handleResponseError(res, module);\n        }),\n      );\n  }\n\n  resetPassword(data: any = {}): Observable<NbAuthResult> {\n\n    const module = 'resetPass';\n    const method = this.getOption(`${module}.method`);\n    const url = this.getActionEndpoint(module);\n    const tokenKey = this.getOption(`${module}.resetPasswordTokenKey`);\n    data[tokenKey] = this.route.snapshot.queryParams[tokenKey];\n    return this.http.request(method, url, {body: data, observe: 'response'})\n      .pipe(\n        map((res) => {\n          if (this.getOption(`${module}.alwaysFail`)) {\n            throw this.createFailResponse();\n          }\n\n          return res;\n        }),\n        map((res) => {\n          return new NbAuthResult(\n            true,\n            res,\n            this.getOption(`${module}.redirect.success`),\n            [],\n            this.getOption('messages.getter')(module, res, this.options));\n        }),\n        catchError((res) => {\n          return this.handleResponseError(res, module);\n        }),\n      );\n  }\n\n  logout(): Observable<NbAuthResult> {\n\n    const module = 'logout';\n    const method = this.getOption(`${module}.method`);\n    const url = this.getActionEndpoint(module);\n\n    return observableOf({})\n      .pipe(\n        switchMap((res: any) => {\n          if (!url) {\n            return observableOf(res);\n          }\n          return this.http.request(method, url, {observe: 'response'});\n        }),\n        map((res) => {\n          if (this.getOption(`${module}.alwaysFail`)) {\n            throw this.createFailResponse();\n          }\n\n          return res;\n        }),\n        map((res) => {\n          return new NbAuthResult(\n            true,\n            res,\n            this.getOption(`${module}.redirect.success`),\n            [],\n            this.getOption('messages.getter')(module, res, this.options));\n        }),\n        catchError((res) => {\n          return this.handleResponseError(res, module);\n        }),\n      );\n  }\n\n  refreshToken(data?: any): Observable<NbAuthResult> {\n\n    const module = 'refreshToken';\n    const method = this.getOption(`${module}.method`);\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n\n    return this.http.request(method, url, {body: data, observe: 'response'})\n      .pipe(\n        map((res) => {\n          if (this.getOption(`${module}.alwaysFail`)) {\n            throw this.createFailResponse(data);\n          }\n\n          return res;\n        }),\n        map((res) => {\n          return new NbAuthResult(\n            true,\n            res,\n            this.getOption(`${module}.redirect.success`),\n            [],\n            this.getOption('messages.getter')(module, res, this.options),\n            this.createToken(this.getOption('token.getter')(module, res, this.options), requireValidToken));\n        }),\n        catchError((res) => {\n          return this.handleResponseError(res, module);\n        }),\n      );\n  }\n\n  protected handleResponseError(res: any, module: string): Observable<NbAuthResult> {\n    let errors = [];\n    if (res instanceof HttpErrorResponse) {\n      errors = this.getOption('errors.getter')(module, res, this.options);\n    } else if (res instanceof NbAuthIllegalTokenError) {\n      errors.push(res.message)\n    } else {\n      errors.push('Something went wrong.');\n    }\n    return observableOf(\n      new NbAuthResult(\n        false,\n        res,\n        this.getOption(`${module}.redirect.failure`),\n        errors,\n      ));\n  }\n\n}\n","import { InjectionToken } from '@angular/core';\nimport { HttpRequest } from '@angular/common/http';\nimport { NbAuthStrategy } from './strategies/auth-strategy';\nimport { NbAuthStrategyOptions } from './strategies/auth-strategy-options';\nimport { NbAuthToken, NbAuthTokenClass } from './services/token/token';\n\nexport type NbAuthStrategyClass = new (...params: any[]) => NbAuthStrategy;\n\nexport type NbAuthStrategies  = [NbAuthStrategyClass, NbAuthStrategyOptions][];\n\nexport interface NbAuthOptions {\n  forms?: any;\n  strategies?: NbAuthStrategies;\n}\n\nexport interface NbAuthSocialLink {\n  link?: string,\n  url?: string,\n  target?: string,\n  title?: string,\n  icon?: string,\n}\n\nconst socialLinks: NbAuthSocialLink[] = [];\n\nexport const defaultAuthOptions: any = {\n  strategies: [],\n  forms: {\n    login: {\n      redirectDelay: 500, // delay before redirect after a successful login, while success message is shown to the user\n      strategy: 'email',  // provider id key. If you have multiple strategies, or what to use your own\n      rememberMe: true,   // whether to show or not the `rememberMe` checkbox\n      showMessages: {     // show/not show success/error messages\n        success: true,\n        error: true,\n      },\n      socialLinks: socialLinks, // social links at the bottom of a page\n    },\n    register: {\n      redirectDelay: 500,\n      strategy: 'email',\n      showMessages: {\n        success: true,\n        error: true,\n      },\n      terms: true,\n      socialLinks: socialLinks,\n    },\n    requestPassword: {\n      redirectDelay: 500,\n      strategy: 'email',\n      showMessages: {\n        success: true,\n        error: true,\n      },\n      socialLinks: socialLinks,\n    },\n    resetPassword: {\n      redirectDelay: 500,\n      strategy: 'email',\n      showMessages: {\n        success: true,\n        error: true,\n      },\n      socialLinks: socialLinks,\n    },\n    logout: {\n      redirectDelay: 500,\n      strategy: 'email',\n    },\n    validation: {\n      password: {\n        required: true,\n        minLength: 4,\n        maxLength: 50,\n      },\n      email: {\n        required: true,\n      },\n      fullName: {\n        required: false,\n        minLength: 4,\n        maxLength: 50,\n      },\n    },\n  },\n};\n\nexport const NB_AUTH_OPTIONS = new InjectionToken<NbAuthOptions>('Nebular Auth Options');\nexport const NB_AUTH_USER_OPTIONS = new InjectionToken<NbAuthOptions>('Nebular User Auth Options');\nexport const NB_AUTH_STRATEGIES = new InjectionToken<NbAuthStrategies>('Nebular Auth Strategies');\nexport const NB_AUTH_TOKENS = new InjectionToken<NbAuthTokenClass<NbAuthToken>[]>('Nebular Auth Tokens');\nexport const NB_AUTH_INTERCEPTOR_HEADER = new InjectionToken<string>('Nebular Simple Interceptor Header');\nexport const NB_AUTH_TOKEN_INTERCEPTOR_FILTER =\n       new InjectionToken<(req: HttpRequest<any>) => boolean>('Nebular Interceptor Filter');\n\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Component, OnDestroy } from '@angular/core';\nimport { Location } from '@angular/common';\n\nimport { NbAuthService } from '../services/auth.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'nb-auth',\n  styleUrls: ['./auth.component.scss'],\n  template: `\n    <nb-layout>\n      <nb-layout-column>\n        <nb-card>\n          <nb-card-header>\n            <nav class=\"navigation\">\n              <a href=\"#\" (click)=\"back()\" class=\"link back-link\" aria-label=\"Back\">\n                <nb-icon icon=\"arrow-back\"></nb-icon>\n              </a>\n            </nav>\n          </nb-card-header>\n          <nb-card-body>\n            <nb-auth-block>\n              <router-outlet></router-outlet>\n            </nb-auth-block>\n          </nb-card-body>\n        </nb-card>\n      </nb-layout-column>\n    </nb-layout>\n  `,\n})\nexport class NbAuthComponent implements OnDestroy {\n\n  private destroy$ = new Subject<void>();\n\n  subscription: any;\n\n  authenticated: boolean = false;\n  token: string = '';\n\n  // showcase of how to use the onAuthenticationChange method\n  constructor(protected auth: NbAuthService, protected location: Location) {\n\n    this.subscription = auth.onAuthenticationChange()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((authenticated: boolean) => {\n        this.authenticated = authenticated;\n      });\n  }\n\n  back() {\n    this.location.back();\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { urlBase64Decode } from '../../helpers';\n\nexport abstract class NbAuthToken {\n\n  protected payload: any = null;\n\n  abstract getValue(): string;\n  abstract isValid(): boolean;\n  // the strategy name used to acquire this token (needed for refreshing token)\n  abstract getOwnerStrategyName(): string;\n  abstract getCreatedAt(): Date;\n  abstract toString(): string;\n\n  getName(): string {\n    return (this.constructor as NbAuthTokenClass).NAME;\n  }\n\n  getPayload(): any {\n    return this.payload;\n  }\n}\n\nexport class NbAuthTokenNotFoundError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\nexport class NbAuthIllegalTokenError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\nexport class NbAuthEmptyTokenError extends NbAuthIllegalTokenError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\nexport class NbAuthIllegalJWTTokenError extends NbAuthIllegalTokenError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\nexport interface NbAuthRefreshableToken {\n  getRefreshToken(): string;\n  setRefreshToken(refreshToken: string);\n}\n\nexport interface NbAuthTokenClass<T = NbAuthToken> {\n  NAME: string;\n  new (raw: any, strategyName: string, expDate?: Date): T;\n}\n\nexport function nbAuthCreateToken<T extends NbAuthToken>(tokenClass: NbAuthTokenClass<T>,\n                                  token: any,\n                                  ownerStrategyName: string,\n                                  createdAt?: Date) {\n  return new tokenClass(token, ownerStrategyName, createdAt);\n}\n\nexport function decodeJwtPayload(payload: string): any {\n\n  if (payload.length === 0) {\n    throw new NbAuthEmptyTokenError('Cannot extract from an empty payload.');\n  }\n\n  const parts = payload.split('.');\n\n  if (parts.length !== 3) {\n    throw new NbAuthIllegalJWTTokenError(\n      `The payload ${payload} is not valid JWT payload and must consist of three parts.`);\n  }\n\n  let decoded;\n  try {\n    decoded = urlBase64Decode(parts[1]);\n  } catch (e) {\n    throw new NbAuthIllegalJWTTokenError(\n      `The payload ${payload} is not valid JWT payload and cannot be parsed.`);\n  }\n\n  if (!decoded) {\n    throw new NbAuthIllegalJWTTokenError(\n      `The payload ${payload} is not valid JWT payload and cannot be decoded.`);\n  }\n  return JSON.parse(decoded);\n}\n\n/**\n * Wrapper for simple (text) token\n */\nexport class NbAuthSimpleToken extends NbAuthToken {\n\n  static NAME = 'nb:auth:simple:token';\n\n  constructor(protected readonly token: any,\n              protected readonly ownerStrategyName: string,\n              protected createdAt?: Date) {\n    super();\n    try {\n      this.parsePayload();\n    } catch (err) {\n      if (!(err instanceof NbAuthTokenNotFoundError)) {\n        // token is present but has got a problem, including illegal\n        throw err;\n      }\n    }\n    this.createdAt = this.prepareCreatedAt(createdAt);\n  }\n\n  protected parsePayload(): any {\n    this.payload = null;\n  }\n\n  protected prepareCreatedAt(date: Date) {\n    return date ? date : new Date();\n  }\n\n  /**\n   * Returns the token's creation date\n   * @returns {Date}\n   */\n  getCreatedAt(): Date {\n    return this.createdAt;\n  }\n\n  /**\n   * Returns the token value\n   * @returns string\n   */\n  getValue(): string {\n    return this.token;\n  }\n\n  getOwnerStrategyName(): string {\n    return this.ownerStrategyName;\n  }\n\n  /**\n   * Is non empty and valid\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return !!this.getValue();\n  }\n\n  /**\n   * Validate value and convert to string, if value is not valid return empty string\n   * @returns {string}\n   */\n  toString(): string {\n    return !!this.token ? this.token : '';\n  }\n}\n\n/**\n * Wrapper for JWT token with additional methods.\n */\nexport class NbAuthJWTToken extends NbAuthSimpleToken {\n\n  static NAME = 'nb:auth:jwt:token';\n\n  /**\n   * for JWT token, the iat (issued at) field of the token payload contains the creation Date\n   */\n  protected prepareCreatedAt(date: Date) {\n      const decoded = this.getPayload();\n      return decoded && decoded.iat ? new Date(Number(decoded.iat) * 1000) : super.prepareCreatedAt(date);\n  }\n\n  /**\n   * Returns payload object\n   * @returns any\n   */\n  protected parsePayload(): void {\n    if (!this.token) {\n      throw new NbAuthTokenNotFoundError('Token not found. ')\n    }\n    this.payload = decodeJwtPayload(this.token);\n  }\n\n  /**\n   * Returns expiration date\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    const decoded = this.getPayload();\n    if (decoded && !decoded.hasOwnProperty('exp')) {\n      return null;\n    }\n    const date = new Date(0);\n    date.setUTCSeconds(decoded.exp); // 'cause jwt token are set in seconds\n    return date;\n  }\n\n  /**\n   * Is data expired\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return super.isValid() && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\n  }\n}\n\nconst prepareOAuth2Token = (data) => {\n  if (typeof data === 'string') {\n    try {\n      return JSON.parse(data);\n    } catch (e) {}\n  }\n  return data;\n};\n\n/**\n * Wrapper for OAuth2 token whose access_token is a JWT Token\n */\nexport class NbAuthOAuth2Token extends NbAuthSimpleToken {\n\n  static NAME = 'nb:auth:oauth2:token';\n\n  constructor( data: { [key: string]: string|number }|string = {},\n               ownerStrategyName: string,\n               createdAt?: Date) {\n\n    // we may get it as string when retrieving from a storage\n    super(prepareOAuth2Token(data), ownerStrategyName, createdAt);\n  }\n\n  /**\n   * Returns the token value\n   * @returns string\n   */\n  getValue(): string {\n    return this.token.access_token;\n  }\n\n  /**\n   * Returns the refresh token\n   * @returns string\n   */\n  getRefreshToken(): string {\n    return this.token.refresh_token;\n  }\n\n  /**\n   *  put refreshToken in the token payload\n    * @param refreshToken\n   */\n  setRefreshToken(refreshToken: string) {\n    this.token.refresh_token = refreshToken;\n  }\n\n  /**\n   * Parses token payload\n   * @returns any\n   */\n  protected parsePayload(): void {\n    if (!this.token) {\n      throw new NbAuthTokenNotFoundError('Token not found.')\n    } else {\n      if (!Object.keys(this.token).length) {\n        throw new NbAuthEmptyTokenError('Cannot extract payload from an empty token.');\n      }\n    }\n    this.payload = this.token;\n  }\n\n  /**\n   * Returns the token type\n   * @returns string\n   */\n  getType(): string {\n    return this.token.token_type;\n  }\n\n  /**\n   * Is data expired\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return super.isValid() && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\n  }\n\n  /**\n   * Returns expiration date\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    if (!this.token.hasOwnProperty('expires_in')) {\n      return null;\n    }\n    return new Date(this.createdAt.getTime() + Number(this.token.expires_in) * 1000);\n}\n\n  /**\n   * Convert to string\n   * @returns {string}\n   */\n  toString(): string {\n    return JSON.stringify(this.token);\n  }\n}\n\n/**\n * Wrapper for OAuth2 token embedding JWT tokens\n */\nexport class NbAuthOAuth2JWTToken extends NbAuthOAuth2Token {\n\n  static NAME = 'nb:auth:oauth2:jwt:token';\n\n  protected accessTokenPayload: any;\n\n  protected parsePayload(): void {\n    super.parsePayload();\n    this.parseAccessTokenPayload();\n  }\n\n  protected parseAccessTokenPayload(): any {\n    const accessToken = this.getValue();\n    if (!accessToken) {\n      throw new NbAuthTokenNotFoundError('access_token key not found.')\n    }\n    this.accessTokenPayload = decodeJwtPayload(accessToken);\n  }\n\n  /**\n   * Returns access token payload\n   * @returns any\n   */\n  getAccessTokenPayload(): any {\n    return this.accessTokenPayload;\n  }\n\n  /**\n   * for Oauth2 JWT token, the iat (issued at) field of the access_token payload\n   */\n  protected prepareCreatedAt(date: Date) {\n    const payload = this.accessTokenPayload;\n    return payload && payload.iat ? new Date(Number(payload.iat) * 1000) : super.prepareCreatedAt(date);\n  }\n\n  /**\n   * Is token valid\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return this.accessTokenPayload && super.isValid();\n  }\n\n  /**\n   * Returns expiration date :\n   * - exp if set,\n   * - super.getExpDate() otherwise\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    if (this.accessTokenPayload && this.accessTokenPayload.hasOwnProperty('exp')) {\n      const date = new Date(0);\n      date.setUTCSeconds(this.accessTokenPayload.exp);\n      return date;\n    } else {\n      return super.getTokenExpDate();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable, of as observableOf } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport { NbAuthStrategy } from '../auth-strategy';\nimport { NbAuthResult } from '../../services/auth-result';\nimport { NbDummyAuthStrategyOptions, dummyStrategyOptions } from './dummy-strategy-options';\nimport { NbAuthStrategyClass } from '../../auth.options';\n\n\n/**\n * Dummy auth strategy. Could be useful for auth setup when backend is not available yet.\n *\n *\n * Strategy settings.\n *\n * ```ts\n * export class NbDummyAuthStrategyOptions extends NbAuthStrategyOptions {\n *   name = 'dummy';\n *   token = {\n *     class: NbAuthSimpleToken,\n *   };\n *   delay? = 1000;\n *   alwaysFail? = false;\n * }\n * ```\n */\n@Injectable()\nexport class NbDummyAuthStrategy extends NbAuthStrategy {\n\n  protected defaultOptions: NbDummyAuthStrategyOptions = dummyStrategyOptions;\n\n  static setup(options: NbDummyAuthStrategyOptions): [NbAuthStrategyClass, NbDummyAuthStrategyOptions] {\n    return [NbDummyAuthStrategy, options];\n  }\n\n  authenticate(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .pipe(\n        delay(this.getOption('delay')),\n      );\n  }\n\n  register(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .pipe(\n        delay(this.getOption('delay')),\n      );\n  }\n\n  requestPassword(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .pipe(\n        delay(this.getOption('delay')),\n      );\n  }\n\n  resetPassword(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .pipe(\n        delay(this.getOption('delay')),\n      );\n  }\n\n  logout(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .pipe(\n        delay(this.getOption('delay')),\n      );\n  }\n\n  refreshToken(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .pipe(\n        delay(this.getOption('delay')),\n      );\n  }\n\n  protected createDummyResult(data?: any): NbAuthResult {\n\n    if (this.getOption('alwaysFail')) {\n      return new NbAuthResult(\n        false,\n        this.createFailResponse(data),\n        null,\n        ['Something went wrong.'],\n      );\n    }\n\n    try {\n      const token = this.createToken('test token', true);\n      return new NbAuthResult(\n        true,\n        this.createSuccessResponse(data),\n        '/',\n        [],\n        ['Successfully logged in.'],\n        token,\n      );\n    } catch (err) {\n      return new NbAuthResult(\n        false,\n        this.createFailResponse(data),\n        null,\n        [err.message],\n      );\n    }\n\n\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { NbAuthOAuth2Token, NbAuthTokenClass } from '../../services/token/token';\nimport { NbAuthStrategyOptions } from '../auth-strategy-options';\n\nexport enum NbOAuth2ResponseType {\n  CODE = 'code',\n  TOKEN = 'token',\n}\n\n// TODO: client_credentials\nexport enum NbOAuth2GrantType {\n  AUTHORIZATION_CODE = 'authorization_code',\n  PASSWORD = 'password',\n  REFRESH_TOKEN = 'refresh_token',\n}\n\nexport enum NbOAuth2ClientAuthMethod {\n  NONE = 'none',\n  BASIC = 'basic',\n  REQUEST_BODY = 'request-body',\n}\n\nexport class NbOAuth2AuthStrategyOptions extends NbAuthStrategyOptions {\n  baseEndpoint?: string = '';\n  clientId: string = '';\n  clientSecret?: string = '';\n  clientAuthMethod?: string = NbOAuth2ClientAuthMethod.NONE;\n  redirect?: { success?: string; failure?: string } = {\n    success: '/',\n    failure: null,\n  };\n  defaultErrors?: any[] = ['Something went wrong, please try again.'];\n  defaultMessages?: any[] = ['You have been successfully authenticated.'];\n  authorize?: {\n    endpoint?: string;\n    redirectUri?: string;\n    responseType?: string;\n    requireValidToken?: boolean; // used only with NbOAuth2ResponseType.TOKEN\n    scope?: string;\n    state?: string;\n    params?: { [key: string]: string };\n  } = {\n    endpoint: 'authorize',\n    responseType: NbOAuth2ResponseType.CODE,\n    requireValidToken: true,\n  };\n  token?: {\n    endpoint?: string;\n    grantType?: string;\n    redirectUri?: string;\n    scope?: string; // Used only with 'password' grantType\n    requireValidToken?: boolean;\n    class: NbAuthTokenClass,\n  } = {\n    endpoint: 'token',\n    grantType: NbOAuth2GrantType.AUTHORIZATION_CODE,\n    requireValidToken: true,\n    class: NbAuthOAuth2Token,\n  };\n  refresh?: {\n    endpoint?: string;\n    grantType?: string;\n    scope?: string;\n    requireValidToken?: boolean;\n  } = {\n    endpoint: 'token',\n    grantType: NbOAuth2GrantType.REFRESH_TOKEN,\n    requireValidToken: true,\n  };\n}\n\nexport const auth2StrategyOptions: NbOAuth2AuthStrategyOptions = new NbOAuth2AuthStrategyOptions();\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NB_AUTH_OPTIONS } from '../../auth.options';\nimport { getDeepFromObject } from '../../helpers';\n\nimport { NbAuthService } from '../../services/auth.service';\nimport { NbAuthResult } from '../../services/auth-result';\n\n@Component({\n  selector: 'nb-reset-password-page',\n  styleUrls: ['./reset-password.component.scss'],\n  templateUrl: './reset-password.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbResetPasswordComponent {\n\n  redirectDelay: number = 0;\n  showMessages: any = {};\n  strategy: string = '';\n\n  submitted = false;\n  errors: string[] = [];\n  messages: string[] = [];\n  user: any = {};\n\n  constructor(protected service: NbAuthService,\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\n              protected cd: ChangeDetectorRef,\n              protected router: Router) {\n\n    this.redirectDelay = this.getConfigValue('forms.resetPassword.redirectDelay');\n    this.showMessages = this.getConfigValue('forms.resetPassword.showMessages');\n    this.strategy = this.getConfigValue('forms.resetPassword.strategy');\n  }\n\n  resetPass(): void {\n    this.errors = this.messages = [];\n    this.submitted = true;\n\n    this.service.resetPassword(this.strategy, this.user).subscribe((result: NbAuthResult) => {\n      this.submitted = false;\n      if (result.isSuccess()) {\n        this.messages = result.getMessages();\n      } else {\n        this.errors = result.getErrors();\n      }\n\n      const redirect = result.getRedirect();\n      if (redirect) {\n        setTimeout(() => {\n          return this.router.navigateByUrl(redirect);\n        }, this.redirectDelay);\n      }\n      this.cd.detectChanges();\n    });\n  }\n\n  getConfigValue(key: string): any {\n    return getDeepFromObject(this.options, key, null);\n  }\n}\n","<h1 id=\"title\" class=\"title\">Change password</h1>\n<p class=\"sub-title\">Please set a new password</p>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"resetPass()\" #resetPassForm=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">New Password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           type=\"password\"\n           id=\"input-password\"\n           name=\"password\"\n           class=\"first\"\n           placeholder=\"New Password\"\n           autofocus\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contains\n        from {{getConfigValue('forms.validation.password.minLength')}}\n        to {{getConfigValue('forms.validation.password.maxLength')}}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-group\">\n    <label class=\"label\" for=\"input-re-password\">Confirm Password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.confirmPassword\"\n           #rePass=\"ngModel\"\n           id=\"input-re-password\"\n           name=\"rePass\"\n           type=\"password\"\n           class=\"last\"\n           placeholder=\"Confirm Password\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"rePass.touched\n               ? (rePass.invalid || password.value != rePass.value ? 'danger' : 'success')\n               : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [attr.aria-invalid]=\"rePass.invalid && rePass.touched ? true : null\">\n    <ng-container *ngIf=\"rePass.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"rePass.invalid && rePass.errors?.required\">\n        Password confirmation is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.value != rePass.value && !rePass.errors?.required\">\n        Password does not match the confirm password.\n      </p>\n    </ng-container>\n  </div>\n\n  <button nbButton\n          status=\"primary\"\n          fullWidth\n          size=\"large\"\n          [disabled]=\"submitted || !resetPassForm.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Change password\n  </button>\n</form>\n\n<section class=\"sign-in-or-up\" aria-label=\"Sign in or sign up\">\n  <p><a class=\"text-link\" routerLink=\"../login\">Back to Log In</a></p>\n  <p><a class=\"text-link\" routerLink=\"../register\">Register</a></p>\n</section>\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NB_AUTH_OPTIONS, NbAuthSocialLink } from '../../auth.options';\nimport { getDeepFromObject } from '../../helpers';\n\nimport { NbAuthService } from '../../services/auth.service';\nimport { NbAuthResult } from '../../services/auth-result';\n\n\n@Component({\n  selector: 'nb-register',\n  styleUrls: ['./register.component.scss'],\n  templateUrl: './register.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbRegisterComponent {\n\n  redirectDelay: number = 0;\n  showMessages: any = {};\n  strategy: string = '';\n\n  submitted = false;\n  errors: string[] = [];\n  messages: string[] = [];\n  user: any = {};\n  socialLinks: NbAuthSocialLink[] = [];\n\n  constructor(protected service: NbAuthService,\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\n              protected cd: ChangeDetectorRef,\n              protected router: Router) {\n\n    this.redirectDelay = this.getConfigValue('forms.register.redirectDelay');\n    this.showMessages = this.getConfigValue('forms.register.showMessages');\n    this.strategy = this.getConfigValue('forms.register.strategy');\n    this.socialLinks = this.getConfigValue('forms.login.socialLinks');\n  }\n\n  register(): void {\n    this.errors = this.messages = [];\n    this.submitted = true;\n\n    this.service.register(this.strategy, this.user).subscribe((result: NbAuthResult) => {\n      this.submitted = false;\n      if (result.isSuccess()) {\n        this.messages = result.getMessages();\n      } else {\n        this.errors = result.getErrors();\n      }\n\n      const redirect = result.getRedirect();\n      if (redirect) {\n        setTimeout(() => {\n          return this.router.navigateByUrl(redirect);\n        }, this.redirectDelay);\n      }\n      this.cd.detectChanges();\n    });\n  }\n\n  getConfigValue(key: string): any {\n    return getDeepFromObject(this.options, key, null);\n  }\n}\n","<h1 id=\"title\" class=\"title\">Register</h1>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"register()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-name\">Full name:</label>\n    <input nbInput\n           [(ngModel)]=\"user.fullName\"\n           #fullName=\"ngModel\"\n           id=\"input-name\"\n           name=\"fullName\"\n           placeholder=\"Full name\"\n           autofocus\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"fullName.dirty ? (fullName.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.fullName.required')\"\n           [minlength]=\"getConfigValue('forms.validation.fullName.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.fullName.maxLength')\"\n           [attr.aria-invalid]=\"fullName.invalid && fullName.touched ? true : null\">\n    <ng-container *ngIf=\"fullName.invalid && fullName.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"fullName.errors?.required\">\n        Full name is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"fullName.errors?.minlength || fullName.errors?.maxlength\">\n        Full name should contains\n        from {{getConfigValue('forms.validation.fullName.minLength')}}\n        to {{getConfigValue('forms.validation.fullName.maxLength')}}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input nbInput\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           id=\"input-email\"\n           name=\"email\"\n           pattern=\".+@.+..+\"\n           placeholder=\"Email address\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           type=\"password\"\n           id=\"input-password\"\n           name=\"password\"\n           placeholder=\"Password\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contain\n        from {{ getConfigValue('forms.validation.password.minLength') }}\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-re-password\">Repeat password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.confirmPassword\"\n           #rePass=\"ngModel\"\n           type=\"password\"\n           id=\"input-re-password\"\n           name=\"rePass\"\n           placeholder=\"Confirm Password\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"rePass.dirty ? (rePass.invalid || password.value != rePass.value  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [attr.aria-invalid]=\"rePass.invalid && rePass.touched ? true : null\">\n    <ng-container *ngIf=\"rePass.invalid && rePass.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"rePass.errors?.required\">\n        Password confirmation is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.value != rePass.value && !rePass.errors?.required\">\n        Password does not match the confirm password.\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\" *ngIf=\"getConfigValue('forms.register.terms')\">\n    <nb-checkbox name=\"terms\" [(ngModel)]=\"user.terms\" [required]=\"getConfigValue('forms.register.terms')\">\n      Agree to <a href=\"#\" target=\"_blank\"><strong>Terms & Conditions</strong></a>\n    </nb-checkbox>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !form.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Register\n  </button>\n</form>\n\n<section *ngIf=\"socialLinks && socialLinks.length > 0\" class=\"links\" aria-label=\"Social sign in\">\n  or enter with:\n  <div class=\"socials\">\n    <ng-container *ngFor=\"let socialLink of socialLinks\">\n      <a *ngIf=\"socialLink.link\"\n         [routerLink]=\"socialLink.link\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n      <a *ngIf=\"socialLink.url\"\n         [attr.href]=\"socialLink.url\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n    </ng-container>\n  </div>\n</section>\n\n<section class=\"another-action\" aria-label=\"Sign in\">\n  Already have an account? <a class=\"text-link\" routerLink=\"../login\">Log in</a>\n</section>\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { NB_AUTH_OPTIONS } from '../../auth.options';\nimport { getDeepFromObject } from '../../helpers';\nimport { NbAuthService } from '../../services/auth.service';\nimport { NbAuthResult } from '../../services/auth-result';\n\n@Component({\n  selector: 'nb-logout',\n  templateUrl: './logout.component.html',\n})\nexport class NbLogoutComponent implements OnInit {\n\n  redirectDelay: number = 0;\n  strategy: string = '';\n\n  constructor(protected service: NbAuthService,\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\n              protected router: Router) {\n    this.redirectDelay = this.getConfigValue('forms.logout.redirectDelay');\n    this.strategy = this.getConfigValue('forms.logout.strategy');\n  }\n\n  ngOnInit(): void {\n    this.logout(this.strategy);\n  }\n\n  logout(strategy: string): void {\n    this.service.logout(strategy).subscribe((result: NbAuthResult) => {\n\n      const redirect = result.getRedirect();\n      if (redirect) {\n        setTimeout(() => {\n          return this.router.navigateByUrl(redirect);\n        }, this.redirectDelay);\n      }\n    });\n  }\n\n  getConfigValue(key: string): any {\n    return getDeepFromObject(this.options, key, null);\n  }\n}\n","<div>Logging out, please wait...</div>\n","import { Injector, ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { HttpRequest } from '@angular/common/http';\n\nimport {\n  NbAlertModule,\n  NbButtonModule,\n  NbCardModule,\n  NbCheckboxModule,\n  NbIconModule,\n  NbInputModule,\n  NbLayoutModule,\n} from '@nebular/theme';\n\nimport { NbAuthService } from './services/auth.service';\nimport { NbAuthSimpleToken, NbAuthTokenClass } from './services/token/token';\nimport { NbTokenLocalStorage, NbTokenStorage } from './services/token/token-storage';\nimport { NbTokenService } from './services/token/token.service';\nimport { NbAuthTokenParceler, NB_AUTH_FALLBACK_TOKEN } from './services/token/token-parceler';\nimport { NbAuthStrategy } from './strategies/auth-strategy';\nimport { NbAuthStrategyOptions } from './strategies/auth-strategy-options';\nimport { NbDummyAuthStrategy } from './strategies/dummy/dummy-strategy';\nimport { NbOAuth2AuthStrategy } from './strategies/oauth2/oauth2-strategy';\nimport { NbPasswordAuthStrategy } from './strategies/password/password-strategy';\n\nimport {\n  defaultAuthOptions,\n  NB_AUTH_INTERCEPTOR_HEADER,\n  NB_AUTH_OPTIONS,\n  NB_AUTH_STRATEGIES,\n  NB_AUTH_TOKEN_INTERCEPTOR_FILTER,\n  NB_AUTH_TOKENS,\n  NB_AUTH_USER_OPTIONS,\n  NbAuthOptions,\n  NbAuthStrategyClass,\n} from './auth.options';\n\nimport { NbAuthComponent } from './components/auth.component';\n\nimport { NbAuthBlockComponent } from './components/auth-block/auth-block.component';\nimport { NbLoginComponent } from './components/login/login.component';\nimport { NbRegisterComponent } from './components/register/register.component';\nimport { NbLogoutComponent } from './components/logout/logout.component';\nimport { NbRequestPasswordComponent } from './components/request-password/request-password.component';\nimport { NbResetPasswordComponent } from './components/reset-password/reset-password.component';\n\nimport { deepExtend } from './helpers';\n\nexport function nbStrategiesFactory(options: NbAuthOptions, injector: Injector): NbAuthStrategy[] {\n  const strategies = [];\n  options.strategies\n    .forEach(([strategyClass, strategyOptions]: [NbAuthStrategyClass, NbAuthStrategyOptions]) => {\n      const strategy: NbAuthStrategy = injector.get(strategyClass);\n      strategy.setOptions(strategyOptions);\n\n      strategies.push(strategy);\n    });\n  return strategies;\n}\n\nexport function nbTokensFactory(strategies: NbAuthStrategy[]): NbAuthTokenClass[] {\n  const tokens = [];\n  strategies\n    .forEach((strategy: NbAuthStrategy) => {\n      tokens.push(strategy.getOption('token.class'));\n    });\n  return tokens;\n}\n\nexport function nbOptionsFactory(options) {\n  return deepExtend(defaultAuthOptions, options);\n}\n\nexport function nbNoOpInterceptorFilter(req: HttpRequest<any>): boolean {\n  return true;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NbLayoutModule,\n    NbCardModule,\n    NbCheckboxModule,\n    NbAlertModule,\n    NbInputModule,\n    NbButtonModule,\n    RouterModule,\n    FormsModule,\n    NbIconModule,\n  ],\n  declarations: [\n    NbAuthComponent,\n    NbAuthBlockComponent,\n    NbLoginComponent,\n    NbRegisterComponent,\n    NbRequestPasswordComponent,\n    NbResetPasswordComponent,\n    NbLogoutComponent,\n  ],\n  exports: [\n    NbAuthComponent,\n    NbAuthBlockComponent,\n    NbLoginComponent,\n    NbRegisterComponent,\n    NbRequestPasswordComponent,\n    NbResetPasswordComponent,\n    NbLogoutComponent,\n  ],\n})\nexport class NbAuthModule {\n  static forRoot(nbAuthOptions?: NbAuthOptions): ModuleWithProviders<NbAuthModule> {\n    return {\n      ngModule: NbAuthModule,\n      providers: [\n        { provide: NB_AUTH_USER_OPTIONS, useValue: nbAuthOptions },\n        { provide: NB_AUTH_OPTIONS, useFactory: nbOptionsFactory, deps: [NB_AUTH_USER_OPTIONS] },\n        { provide: NB_AUTH_STRATEGIES, useFactory: nbStrategiesFactory, deps: [NB_AUTH_OPTIONS, Injector] },\n        { provide: NB_AUTH_TOKENS, useFactory: nbTokensFactory, deps: [NB_AUTH_STRATEGIES] },\n        { provide: NB_AUTH_FALLBACK_TOKEN, useValue: NbAuthSimpleToken },\n        { provide: NB_AUTH_INTERCEPTOR_HEADER, useValue: 'Authorization' },\n        { provide: NB_AUTH_TOKEN_INTERCEPTOR_FILTER, useValue: nbNoOpInterceptorFilter },\n        { provide: NbTokenStorage, useClass: NbTokenLocalStorage },\n        NbAuthTokenParceler,\n        NbAuthService,\n        NbTokenService,\n        NbDummyAuthStrategy,\n        NbPasswordAuthStrategy,\n        NbOAuth2AuthStrategy,\n      ],\n    };\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Inject, Injectable } from '@angular/core';\n\nimport { Observable, of as observableOf } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\nimport { NbAuthStrategy } from '../strategies/auth-strategy';\nimport { NB_AUTH_STRATEGIES } from '../auth.options';\nimport { NbAuthResult } from './auth-result';\nimport { NbTokenService } from './token/token.service';\nimport { NbAuthToken } from './token/token';\n\n/**\n * Common authentication service.\n * Should be used to as an interlayer between UI Components and Auth Strategy.\n */\n@Injectable()\nexport class NbAuthService {\n\n  constructor(protected tokenService: NbTokenService,\n              @Inject(NB_AUTH_STRATEGIES) protected strategies) {\n  }\n\n  /**\n   * Retrieves current authenticated token stored\n   * @returns {Observable<any>}\n   */\n  getToken(): Observable<NbAuthToken> {\n    return this.tokenService.get();\n  }\n\n  /**\n   * Returns true if auth token is present in the token storage\n   * @returns {Observable<boolean>}\n   */\n  isAuthenticated(): Observable<boolean> {\n    return this.getToken()\n      .pipe(map((token: NbAuthToken) => token.isValid()));\n  }\n\n  /**\n   * Returns true if valid auth token is present in the token storage.\n   * If not, calls the strategy refreshToken, and returns isAuthenticated() if success, false otherwise\n   * @returns {Observable<boolean>}\n   */\n  isAuthenticatedOrRefresh(): Observable<boolean> {\n    return this.getToken()\n      .pipe(\n        switchMap(token => {\n        if (token.getValue() && !token.isValid()) {\n          return this.refreshToken(token.getOwnerStrategyName(), token)\n            .pipe(\n              switchMap(res => {\n                if (res.isSuccess()) {\n                  return this.isAuthenticated();\n                } else {\n                  return observableOf(false);\n                }\n              }),\n            )\n        } else {\n          return observableOf(token.isValid());\n        }\n    }));\n  }\n\n  /**\n   * Returns tokens stream\n   * @returns {Observable<NbAuthSimpleToken>}\n   */\n  onTokenChange(): Observable<NbAuthToken> {\n    return this.tokenService.tokenChange();\n  }\n\n  /**\n   * Returns authentication status stream\n   * @returns {Observable<boolean>}\n   */\n  onAuthenticationChange(): Observable<boolean> {\n    return this.onTokenChange()\n      .pipe(map((token: NbAuthToken) => token.isValid()));\n  }\n\n  /**\n   * Authenticates with the selected strategy\n   * Stores received token in the token storage\n   *\n   * Example:\n   * authenticate('email', {email: 'email@example.com', password: 'test'})\n   *\n   * @param strategyName\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  authenticate(strategyName: string, data?: any): Observable<NbAuthResult> {\n    return this.getStrategy(strategyName).authenticate(data)\n      .pipe(\n        switchMap((result: NbAuthResult) => {\n          return this.processResultToken(result);\n        }),\n      );\n  }\n\n  /**\n   * Registers with the selected strategy\n   * Stores received token in the token storage\n   *\n   * Example:\n   * register('email', {email: 'email@example.com', name: 'Some Name', password: 'test'})\n   *\n   * @param strategyName\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  register(strategyName: string, data?: any): Observable<NbAuthResult> {\n    return this.getStrategy(strategyName).register(data)\n      .pipe(\n        switchMap((result: NbAuthResult) => {\n          return this.processResultToken(result);\n        }),\n      );\n  }\n\n  /**\n   * Sign outs with the selected strategy\n   * Removes token from the token storage\n   *\n   * Example:\n   * logout('email')\n   *\n   * @param strategyName\n   * @returns {Observable<NbAuthResult>}\n   */\n  logout(strategyName: string): Observable<NbAuthResult> {\n    return this.getStrategy(strategyName).logout()\n      .pipe(\n        switchMap((result: NbAuthResult) => {\n          if (result.isSuccess()) {\n            this.tokenService.clear()\n              .pipe(map(() => result));\n          }\n          return observableOf(result);\n        }),\n      );\n  }\n\n  /**\n   * Sends forgot password request to the selected strategy\n   *\n   * Example:\n   * requestPassword('email', {email: 'email@example.com'})\n   *\n   * @param strategyName\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  requestPassword(strategyName: string, data?: any): Observable<NbAuthResult> {\n    return this.getStrategy(strategyName).requestPassword(data);\n  }\n\n  /**\n   * Tries to reset password with the selected strategy\n   *\n   * Example:\n   * resetPassword('email', {newPassword: 'test'})\n   *\n   * @param strategyName\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  resetPassword(strategyName: string, data?: any): Observable<NbAuthResult> {\n    return this.getStrategy(strategyName).resetPassword(data);\n  }\n\n  /**\n   * Sends a refresh token request\n   * Stores received token in the token storage\n   *\n   * Example:\n   * refreshToken('email', {token: token})\n   *\n   * @param {string} strategyName\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  refreshToken(strategyName: string, data?: any): Observable<NbAuthResult> {\n    return this.getStrategy(strategyName).refreshToken(data)\n      .pipe(\n        switchMap((result: NbAuthResult) => {\n          return this.processResultToken(result);\n        }),\n      );\n  }\n\n  /**\n   * Get registered strategy by name\n   *\n   * Example:\n   * getStrategy('email')\n   *\n   * @param {string} provider\n   * @returns {NbAbstractAuthProvider}\n   */\n  protected getStrategy(strategyName: string): NbAuthStrategy {\n    const found = this.strategies.find((strategy: NbAuthStrategy) => strategy.getName() === strategyName);\n\n    if (!found) {\n      throw new TypeError(`There is no Auth Strategy registered under '${strategyName}' name`);\n    }\n\n    return found;\n  }\n\n  private processResultToken(result: NbAuthResult) {\n    if (result.isSuccess() && result.getToken()) {\n      return this.tokenService.set(result.getToken())\n        .pipe(\n          map((token: NbAuthToken) => {\n            return result;\n          }),\n        );\n    }\n\n    return observableOf(result);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject, of as observableOf } from 'rxjs';\nimport { filter, share } from 'rxjs/operators';\n\nimport { NbTokenStorage } from './token-storage';\nimport { NbAuthToken } from './token';\n\n/**\n * Service that allows you to manage authentication token - get, set, clear and also listen to token changes over time.\n */\n@Injectable()\nexport class NbTokenService {\n\n  protected token$: BehaviorSubject<NbAuthToken> = new BehaviorSubject(null);\n\n  constructor(protected tokenStorage: NbTokenStorage) {\n    this.publishStoredToken();\n  }\n\n  /**\n   * Publishes token when it changes.\n   * @returns {Observable<NbAuthToken>}\n   */\n  tokenChange(): Observable<NbAuthToken> {\n    return this.token$\n      .pipe(\n        filter(value => !!value),\n        share(),\n      );\n  }\n\n  /**\n   * Sets a token into the storage. This method is used by the NbAuthService automatically.\n   *\n   * @param {NbAuthToken} token\n   * @returns {Observable<any>}\n   */\n  set(token: NbAuthToken): Observable<null> {\n    this.tokenStorage.set(token);\n    this.publishStoredToken();\n    return observableOf(null);\n  }\n\n  /**\n   * Returns observable of current token\n   * @returns {Observable<NbAuthToken>}\n   */\n  get(): Observable<NbAuthToken> {\n    const token = this.tokenStorage.get();\n    return observableOf(token);\n  }\n\n  /**\n   * Removes the token and published token value\n   *\n   * @returns {Observable<any>}\n   */\n  clear(): Observable<null> {\n    this.tokenStorage.clear();\n    this.publishStoredToken();\n    return observableOf(null);\n  }\n\n  protected publishStoredToken() {\n    this.token$.next(this.tokenStorage.get());\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { NbAuthSimpleToken, NbAuthTokenClass } from '../../services/token/token';\nimport { NbAuthStrategyOptions } from '../auth-strategy-options';\nimport { getDeepFromObject } from '../../helpers';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\n\nexport interface NbPasswordStrategyModule {\n  alwaysFail?: boolean;\n  endpoint?: string;\n  method?: string;\n  redirect?: {\n    success?: string | null;\n    failure?: string | null;\n  };\n  requireValidToken?: boolean;\n  defaultErrors?: string[];\n  defaultMessages?: string[];\n}\n\nexport interface NbPasswordStrategyReset extends NbPasswordStrategyModule {\n  resetPasswordTokenKey?: string;\n}\n\nexport interface NbPasswordStrategyToken {\n  class?: NbAuthTokenClass,\n  key?: string,\n  getter?: Function,\n}\n\nexport interface NbPasswordStrategyMessage {\n  key?: string,\n  getter?: Function,\n}\n\nexport class NbPasswordAuthStrategyOptions extends NbAuthStrategyOptions {\n  baseEndpoint?: string = '/api/auth/';\n  login?: boolean | NbPasswordStrategyModule = {\n    alwaysFail: false,\n    endpoint: 'login',\n    method: 'post',\n    requireValidToken: true,\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Login/Email combination is not correct, please try again.'],\n    defaultMessages: ['You have been successfully logged in.'],\n  };\n  register?: boolean | NbPasswordStrategyModule = {\n    alwaysFail: false,\n    endpoint: 'register',\n    method: 'post',\n    requireValidToken: true,\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['You have been successfully registered.'],\n  };\n  requestPass?: boolean | NbPasswordStrategyModule = {\n    endpoint: 'request-pass',\n    method: 'post',\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['Reset password instructions have been sent to your email.'],\n  };\n  resetPass?: boolean | NbPasswordStrategyReset = {\n    endpoint: 'reset-pass',\n    method: 'put',\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    resetPasswordTokenKey: 'reset_password_token',\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['Your password has been successfully changed.'],\n  };\n  logout?: boolean | NbPasswordStrategyReset = {\n    alwaysFail: false,\n    endpoint: 'logout',\n    method: 'delete',\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['You have been successfully logged out.'],\n  };\n  refreshToken?: boolean | NbPasswordStrategyModule = {\n    endpoint: 'refresh-token',\n    method: 'post',\n    requireValidToken: true,\n    redirect: {\n      success: null,\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['Your token has been successfully refreshed.'],\n  };\n  token?: NbPasswordStrategyToken = {\n    class: NbAuthSimpleToken,\n    key: 'data.token',\n    getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n      res.body,\n      options.token.key,\n    ),\n  };\n  errors?: NbPasswordStrategyMessage = {\n    key: 'data.errors',\n    getter: (module: string, res: HttpErrorResponse, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n      res.error,\n      options.errors.key,\n      options[module].defaultErrors,\n    ),\n  };\n  messages?: NbPasswordStrategyMessage = {\n    key: 'data.messages',\n    getter: (module: string, res: HttpResponse<Object>, options: NbPasswordAuthStrategyOptions) => getDeepFromObject(\n      res.body,\n      options.messages.key,\n      options[module].defaultMessages,\n    ),\n  };\n  validation?: {\n    password?: {\n      required?: boolean;\n      minLength?: number | null;\n      maxLength?: number | null;\n      regexp?: string | null;\n    };\n    email?: {\n      required?: boolean;\n      regexp?: string | null;\n    };\n    fullName?: {\n      required?: boolean;\n      minLength?: number | null;\n      maxLength?: number | null;\n      regexp?: string | null;\n    };\n  };\n}\n\nexport const passwordStrategyOptions: NbPasswordAuthStrategyOptions = new NbPasswordAuthStrategyOptions();\n","import { Inject, Injectable, Injector } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { NbAuthService } from '../auth.service';\nimport { NB_AUTH_INTERCEPTOR_HEADER } from '../../auth.options';\nimport { NbAuthJWTToken } from '../token/token';\n\n@Injectable()\nexport class NbAuthSimpleInterceptor implements HttpInterceptor {\n\n  constructor(private injector: Injector,\n              @Inject(NB_AUTH_INTERCEPTOR_HEADER) protected headerName: string = 'Authorization') {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    return this.authService.getToken()\n      .pipe(\n        switchMap((token: NbAuthJWTToken) => {\n          if (token && token.getValue()) {\n            req = req.clone({\n              setHeaders: {\n                [this.headerName]: token.getValue(),\n              },\n            });\n          }\n          return next.handle(req);\n        }),\n      );\n  }\n\n  protected get authService(): NbAuthService {\n    return this.injector.get(NbAuthService);\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NB_AUTH_OPTIONS, NbAuthSocialLink } from '../../auth.options';\nimport { getDeepFromObject } from '../../helpers';\n\nimport { NbAuthService } from '../../services/auth.service';\nimport { NbAuthResult } from '../../services/auth-result';\n\n@Component({\n  selector: 'nb-login',\n  templateUrl: './login.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbLoginComponent {\n\n  redirectDelay: number = 0;\n  showMessages: any = {};\n  strategy: string = '';\n\n  errors: string[] = [];\n  messages: string[] = [];\n  user: any = {};\n  submitted: boolean = false;\n  socialLinks: NbAuthSocialLink[] = [];\n  rememberMe = false;\n\n  constructor(protected service: NbAuthService,\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\n              protected cd: ChangeDetectorRef,\n              protected router: Router) {\n\n    this.redirectDelay = this.getConfigValue('forms.login.redirectDelay');\n    this.showMessages = this.getConfigValue('forms.login.showMessages');\n    this.strategy = this.getConfigValue('forms.login.strategy');\n    this.socialLinks = this.getConfigValue('forms.login.socialLinks');\n    this.rememberMe = this.getConfigValue('forms.login.rememberMe');\n  }\n\n  login(): void {\n    this.errors = [];\n    this.messages = [];\n    this.submitted = true;\n\n    this.service.authenticate(this.strategy, this.user).subscribe((result: NbAuthResult) => {\n      this.submitted = false;\n\n      if (result.isSuccess()) {\n        this.messages = result.getMessages();\n      } else {\n        this.errors = result.getErrors();\n      }\n\n      const redirect = result.getRedirect();\n      if (redirect) {\n        setTimeout(() => {\n          return this.router.navigateByUrl(redirect);\n        }, this.redirectDelay);\n      }\n      this.cd.detectChanges();\n    });\n  }\n\n  getConfigValue(key: string): any {\n    return getDeepFromObject(this.options, key, null);\n  }\n}\n","<h1 id=\"title\" class=\"title\">Login</h1>\n<p class=\"sub-title\">Hello! Log in with your email.</p>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"login()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input nbInput\n           fullWidth\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           name=\"email\"\n           id=\"input-email\"\n           pattern=\".+@.+\\..+\"\n           placeholder=\"Email address\"\n           fieldSize=\"large\"\n           autofocus\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <span class=\"label-with-link\">\n      <label class=\"label\" for=\"input-password\">Password:</label>\n      <a class=\"forgot-password caption-2\" routerLink=\"../request-password\">Forgot Password?</a>\n    </span>\n    <input nbInput\n           fullWidth\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           name=\"password\"\n           type=\"password\"\n           id=\"input-password\"\n           placeholder=\"Password\"\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched \">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contain\n        from {{ getConfigValue('forms.validation.password.minLength') }}\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\">\n    <nb-checkbox name=\"rememberMe\" [(ngModel)]=\"user.rememberMe\" *ngIf=\"rememberMe\">Remember me</nb-checkbox>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !form.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Log In\n  </button>\n</form>\n\n<section *ngIf=\"socialLinks && socialLinks.length > 0\" class=\"links\" aria-label=\"Social sign in\">\n  or enter with:\n  <div class=\"socials\">\n    <ng-container *ngFor=\"let socialLink of socialLinks\">\n      <a *ngIf=\"socialLink.link\"\n         [routerLink]=\"socialLink.link\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n      <a *ngIf=\"socialLink.url\"\n         [attr.href]=\"socialLink.url\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n    </ng-container>\n  </div>\n</section>\n\n<section class=\"another-action\" aria-label=\"Register\">\n  Don't have an account? <a class=\"text-link\" routerLink=\"../register\">Register</a>\n</section>\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'nb-auth-block',\n  styleUrls: ['./auth-block.component.scss'],\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class NbAuthBlockComponent {\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nexport * from './auth.options';\nexport * from './auth.module';\nexport * from './auth.routes';\n\nexport * from './components/auth.component';\nexport * from './components/auth-block/auth-block.component';\nexport * from './components/login/login.component';\nexport * from './components/logout/logout.component';\nexport * from './components/register/register.component';\nexport * from './components/request-password/request-password.component';\nexport * from './components/reset-password/reset-password.component';\nexport * from './services/auth.service';\nexport * from './services/auth-result';\nexport * from './services/interceptors/jwt-interceptor';\nexport * from './services/interceptors/simple-interceptor';\nexport * from './services/token/token';\nexport * from './services/token/token-storage';\nexport * from './services/token/token.service';\nexport * from './services/token/token-parceler';\nexport * from './strategies/auth-strategy';\nexport * from './strategies/auth-strategy-options';\nexport * from './strategies/dummy/dummy-strategy';\nexport * from './strategies/dummy/dummy-strategy-options';\nexport * from './strategies/password/password-strategy';\nexport * from './strategies/password/password-strategy-options';\nexport * from './strategies/oauth2/oauth2-strategy';\nexport * from './strategies/oauth2/oauth2-strategy.options';\nexport * from './models/user';\n\nexport * from './helpers';\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NB_AUTH_OPTIONS } from '../../auth.options';\nimport { getDeepFromObject } from '../../helpers';\n\nimport { NbAuthService } from '../../services/auth.service';\nimport { NbAuthResult } from '../../services/auth-result';\n\n@Component({\n  selector: 'nb-request-password-page',\n  styleUrls: ['./request-password.component.scss'],\n  templateUrl: './request-password.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbRequestPasswordComponent {\n\n  redirectDelay: number = 0;\n  showMessages: any = {};\n  strategy: string = '';\n\n  submitted = false;\n  errors: string[] = [];\n  messages: string[] = [];\n  user: any = {};\n\n  constructor(protected service: NbAuthService,\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\n              protected cd: ChangeDetectorRef,\n              protected router: Router) {\n\n    this.redirectDelay = this.getConfigValue('forms.requestPassword.redirectDelay');\n    this.showMessages = this.getConfigValue('forms.requestPassword.showMessages');\n    this.strategy = this.getConfigValue('forms.requestPassword.strategy');\n  }\n\n  requestPass(): void {\n    this.errors = this.messages = [];\n    this.submitted = true;\n\n    this.service.requestPassword(this.strategy, this.user).subscribe((result: NbAuthResult) => {\n      this.submitted = false;\n      if (result.isSuccess()) {\n        this.messages = result.getMessages();\n      } else {\n        this.errors = result.getErrors();\n      }\n\n      const redirect = result.getRedirect();\n      if (redirect) {\n        setTimeout(() => {\n          return this.router.navigateByUrl(redirect);\n        }, this.redirectDelay);\n      }\n      this.cd.detectChanges();\n    });\n  }\n\n  getConfigValue(key: string): any {\n    return getDeepFromObject(this.options, key, null);\n  }\n}\n","<h1 id=\"title\" class=\"title\">Forgot Password</h1>\n<p class=\"sub-title\">Enter your email address and we’ll send a link to reset your password</p>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"requestPass()\" #requestPassForm=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Enter your email address:</label>\n    <input nbInput\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           id=\"input-email\"\n           name=\"email\"\n           pattern=\".+@.+\\..+\"\n           placeholder=\"Email address\"\n           autofocus\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !requestPassForm.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Request password\n  </button>\n</form>\n\n<section class=\"sign-in-or-up\" aria-label=\"Sign in or sign up\">\n  <p><a class=\"text-link\" routerLink=\"../login\">Back to Log In</a></p>\n  <p><a routerLink=\"../register\" class=\"text-link\">Register</a></p>\n</section>\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { NbAuthTokenClass } from '../services/token/token';\n\nexport interface NbStrategyToken {\n  class?: NbAuthTokenClass;\n  [key: string]: any;\n}\n\nexport class NbAuthStrategyOptions {\n  name: string;\n  token?: NbStrategyToken;\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Routes } from '@angular/router';\n\nimport { NbAuthComponent } from './components/auth.component';\nimport { NbLoginComponent } from './components/login/login.component';\nimport { NbRegisterComponent } from './components/register/register.component';\nimport { NbLogoutComponent } from './components/logout/logout.component';\nimport { NbRequestPasswordComponent } from './components/request-password/request-password.component';\nimport { NbResetPasswordComponent } from './components/reset-password/reset-password.component';\n\nexport const routes: Routes = [\n  {\n    path: 'auth',\n    component: NbAuthComponent,\n    children: [\n      {\n        path: '',\n        component: NbLoginComponent,\n      },\n      {\n        path: 'login',\n        component: NbLoginComponent,\n      },\n      {\n        path: 'register',\n        component: NbRegisterComponent,\n      },\n      {\n        path: 'logout',\n        component: NbLogoutComponent,\n      },\n      {\n        path: 'request-password',\n        component: NbRequestPasswordComponent,\n      },\n      {\n        path: 'reset-password',\n        component: NbResetPasswordComponent,\n      },\n    ],\n  },\n];\n","import { NbAuthToken } from './token/token';\n\nexport class NbAuthResult {\n\n  protected token: NbAuthToken;\n  protected errors: string[] = [];\n  protected messages: string[] = [];\n\n  // TODO: better pass object\n  constructor(protected success: boolean,\n              protected response?: any,\n              protected redirect?: any,\n              errors?: any,\n              messages?: any,\n              token: NbAuthToken = null) {\n\n    this.errors = this.errors.concat([errors]);\n    if (errors instanceof Array) {\n      this.errors = errors;\n    }\n\n    this.messages = this.messages.concat([messages]);\n    if (messages instanceof Array) {\n      this.messages = messages;\n    }\n\n    this.token = token;\n  }\n\n  getResponse(): any {\n    return this.response;\n  }\n\n  getToken(): NbAuthToken {\n    return this.token;\n  }\n\n  getRedirect(): string {\n    return this.redirect;\n  }\n\n  getErrors(): string[] {\n    return this.errors.filter(val => !!val);\n  }\n\n  getMessages(): string[] {\n    return this.messages.filter(val => !!val);\n  }\n\n  isSuccess(): boolean {\n    return this.success;\n  }\n\n  isFailure(): boolean {\n    return !this.success;\n  }\n}\n","import { Inject, Injectable, Injector } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { NbAuthToken } from '../token/token';\nimport { NbAuthService } from '../auth.service';\nimport { NB_AUTH_TOKEN_INTERCEPTOR_FILTER } from '../../auth.options';\n\n@Injectable()\nexport class NbAuthJWTInterceptor implements HttpInterceptor {\n\n  constructor(private injector: Injector,\n              @Inject(NB_AUTH_TOKEN_INTERCEPTOR_FILTER) protected filter) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // do not intercept request whose urls are filtered by the injected filter\n      if (!this.filter(req)) {\n        return this.authService.isAuthenticatedOrRefresh()\n          .pipe(\n            switchMap(authenticated => {\n              if (authenticated) {\n                  return this.authService.getToken().pipe(\n                    switchMap((token: NbAuthToken) => {\n                      const JWT = `Bearer ${token.getValue()}`;\n                      req = req.clone({\n                        setHeaders: {\n                          Authorization: JWT,\n                        },\n                      });\n                      return next.handle(req);\n                    }),\n                  )\n              } else {\n                 // Request is sent to server without authentication so that the client code\n                 // receives the 401/403 error and can act as desired ('session expired', redirect to login, aso)\n                return next.handle(req);\n              }\n            }),\n          )\n      } else {\n      return next.handle(req);\n    }\n  }\n\n  protected get authService(): NbAuthService {\n    return this.injector.get(NbAuthService);\n  }\n\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { NB_WINDOW } from '@nebular/theme';\n\nimport { NbAuthStrategy } from '../auth-strategy';\nimport { NbAuthIllegalTokenError, NbAuthRefreshableToken, NbAuthToken } from '../../services/token/token';\nimport { NbAuthResult } from '../../services/auth-result';\nimport {\n  NbOAuth2AuthStrategyOptions,\n  NbOAuth2ResponseType,\n  auth2StrategyOptions,\n  NbOAuth2GrantType, NbOAuth2ClientAuthMethod,\n} from './oauth2-strategy.options';\nimport { NbAuthStrategyClass } from '../../auth.options';\n\n\n/**\n * OAuth2 authentication strategy.\n *\n * Strategy settings:\n *\n * ```ts\n * export enum NbOAuth2ResponseType {\n *   CODE = 'code',\n *   TOKEN = 'token',\n * }\n *\n * export enum NbOAuth2GrantType {\n *   AUTHORIZATION_CODE = 'authorization_code',\n *   PASSWORD = 'password',\n *   REFRESH_TOKEN = 'refresh_token',\n * }\n *\n * export class NbOAuth2AuthStrategyOptions {\n *   name: string;\n *   baseEndpoint?: string = '';\n *   clientId: string = '';\n *   clientSecret: string = '';\n *   clientAuthMethod: string = NbOAuth2ClientAuthMethod.NONE;\n *   redirect?: { success?: string; failure?: string } = {\n *     success: '/',\n *     failure: null,\n *   };\n *   defaultErrors?: any[] = ['Something went wrong, please try again.'];\n *   defaultMessages?: any[] = ['You have been successfully authenticated.'];\n *   authorize?: {\n *     endpoint?: string;\n *     redirectUri?: string;\n *     responseType?: string;\n *     requireValidToken: true,\n *     scope?: string;\n *     state?: string;\n *     params?: { [key: string]: string };\n *   } = {\n *     endpoint: 'authorize',\n *     responseType: NbOAuth2ResponseType.CODE,\n *   };\n *   token?: {\n *     endpoint?: string;\n *     grantType?: string;\n *     requireValidToken: true,\n *     redirectUri?: string;\n *     scope?: string;\n *     class: NbAuthTokenClass,\n *   } = {\n *     endpoint: 'token',\n *     grantType: NbOAuth2GrantType.AUTHORIZATION_CODE,\n *     class: NbAuthOAuth2Token,\n *   };\n *   refresh?: {\n *     endpoint?: string;\n *     grantType?: string;\n *     scope?: string;\n *     requireValidToken: true,\n *   } = {\n *     endpoint: 'token',\n *     grantType: NbOAuth2GrantType.REFRESH_TOKEN,\n *   };\n * }\n * ```\n *\n */\n@Injectable()\nexport class NbOAuth2AuthStrategy extends NbAuthStrategy {\n\n  static setup(options: NbOAuth2AuthStrategyOptions): [NbAuthStrategyClass, NbOAuth2AuthStrategyOptions] {\n    return [NbOAuth2AuthStrategy, options];\n  }\n\n  get responseType() {\n    return this.getOption('authorize.responseType');\n  }\n\n  get clientAuthMethod() {\n    return this.getOption('clientAuthMethod');\n  }\n\n  protected redirectResultHandlers: { [key: string]: Function } = {\n    [NbOAuth2ResponseType.CODE]: () => {\n      return observableOf(this.route.snapshot.queryParams).pipe(\n        switchMap((params: any) => {\n          if (params.code) {\n            return this.requestToken(params.code)\n          }\n\n          return observableOf(\n            new NbAuthResult(\n              false,\n              params,\n              this.getOption('redirect.failure'),\n              this.getOption('defaultErrors'),\n              [],\n            ));\n        }),\n      );\n    },\n    [NbOAuth2ResponseType.TOKEN]: () => {\n      const module = 'authorize';\n      const requireValidToken = this.getOption(`${module}.requireValidToken`);\n      return observableOf(this.route.snapshot.fragment).pipe(\n        map(fragment => this.parseHashAsQueryParams(fragment)),\n        map((params: any) => {\n          if (!params.error) {\n            return new NbAuthResult(\n              true,\n              params,\n              this.getOption('redirect.success'),\n              [],\n              this.getOption('defaultMessages'),\n              this.createToken(params, requireValidToken));\n          }\n          return new NbAuthResult(\n            false,\n            params,\n            this.getOption('redirect.failure'),\n            this.getOption('defaultErrors'),\n            [],\n          );\n        }),\n        catchError(err => {\n          const errors = [];\n          if (err instanceof NbAuthIllegalTokenError) {\n            errors.push(err.message)\n          } else {\n            errors.push('Something went wrong.');\n          }\n          return observableOf(\n            new NbAuthResult(\n              false,\n              err,\n              this.getOption('redirect.failure'),\n              errors,\n            ));\n        }),\n      );\n    },\n  };\n\n  protected redirectResults: { [key: string]: Function } = {\n    [NbOAuth2ResponseType.CODE]: () => {\n      return observableOf(this.route.snapshot.queryParams).pipe(\n        map((params: any) => !!(params && (params.code || params.error))),\n      );\n    },\n    [NbOAuth2ResponseType.TOKEN]: () => {\n      return observableOf(this.route.snapshot.fragment).pipe(\n        map(fragment => this.parseHashAsQueryParams(fragment)),\n        map((params: any) => !!(params && (params.access_token || params.error))),\n      );\n    },\n  };\n\n  protected defaultOptions: NbOAuth2AuthStrategyOptions = auth2StrategyOptions;\n\n  constructor(protected http: HttpClient,\n              protected route: ActivatedRoute,\n              @Inject(NB_WINDOW) protected window: any) {\n    super();\n  }\n\n  authenticate(data?: any): Observable<NbAuthResult> {\n\n    if (this.getOption('token.grantType') === NbOAuth2GrantType.PASSWORD) {\n      return this.passwordToken(data.email, data.password)\n    } else {\n      return this.isRedirectResult()\n        .pipe(\n          switchMap((result: boolean) => {\n            if (!result) {\n              this.authorizeRedirect();\n              return observableOf(new NbAuthResult(true));\n            }\n            return this.getAuthorizationResult();\n          }),\n        );\n    }\n  }\n\n  getAuthorizationResult(): Observable<any> {\n    const redirectResultHandler = this.redirectResultHandlers[this.responseType];\n    if (redirectResultHandler) {\n      return redirectResultHandler.call(this);\n    }\n\n    throw new Error(`'${this.responseType}' responseType is not supported,\n                      only 'token' and 'code' are supported now`);\n  }\n\n  refreshToken(token: NbAuthRefreshableToken): Observable<NbAuthResult> {\n    const module = 'refresh';\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n\n    let headers = this.buildAuthHeader() || new HttpHeaders() ;\n    headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.http.post(url, this.buildRefreshRequestData(token), { headers: headers })\n      .pipe(\n        map((res) => {\n          return new NbAuthResult(\n            true,\n            res,\n            this.getOption('redirect.success'),\n            [],\n            this.getOption('defaultMessages'),\n            this.createRefreshedToken(res, token, requireValidToken));\n        }),\n        catchError((res) => this.handleResponseError(res)),\n      );\n  }\n\n  passwordToken(username: string, password: string): Observable<NbAuthResult> {\n    const module = 'token';\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n\n    let headers = this.buildAuthHeader() || new HttpHeaders() ;\n    headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.http.post(url, this.buildPasswordRequestData(username, password), { headers: headers })\n      .pipe(\n        map((res) => {\n          return new NbAuthResult(\n            true,\n            res,\n            this.getOption('redirect.success'),\n            [],\n            this.getOption('defaultMessages'),\n            this.createToken(res, requireValidToken));\n        }),\n        catchError((res) => this.handleResponseError(res)),\n      );\n  }\n\n  protected authorizeRedirect() {\n    this.window.location.href = this.buildRedirectUrl();\n  }\n\n  protected isRedirectResult(): Observable<boolean> {\n    return this.redirectResults[this.responseType].call(this);\n  }\n\n  protected requestToken(code: string) {\n\n    const module = 'token';\n    const url = this.getActionEndpoint(module);\n    const requireValidToken = this.getOption(`${module}.requireValidToken`);\n\n    let headers = this.buildAuthHeader() || new HttpHeaders() ;\n    headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.http.post(url, this.buildCodeRequestData(code), { headers: headers })\n      .pipe(\n        map((res) => {\n          return new NbAuthResult(\n            true,\n            res,\n            this.getOption('redirect.success'),\n            [],\n            this.getOption('defaultMessages'),\n            this.createToken(res, requireValidToken));\n        }),\n        catchError((res) => this.handleResponseError(res)),\n      );\n  }\n\n  protected buildCodeRequestData(code: string): any {\n    const params = {\n      grant_type: this.getOption('token.grantType'),\n      code: code,\n      redirect_uri: this.getOption('token.redirectUri'),\n      client_id: this.getOption('clientId'),\n    };\n    return this.urlEncodeParameters(this.cleanParams(this.addCredentialsToParams(params)));\n  }\n\n  protected buildRefreshRequestData(token: NbAuthRefreshableToken): any {\n    const params = {\n      grant_type: this.getOption('refresh.grantType'),\n      refresh_token: token.getRefreshToken(),\n      scope: this.getOption('refresh.scope'),\n      client_id: this.getOption('clientId'),\n    };\n    return this.urlEncodeParameters(this.cleanParams(this.addCredentialsToParams(params)));\n  }\n\n  protected buildPasswordRequestData(username: string, password: string ): string {\n    const params = {\n      grant_type: this.getOption('token.grantType'),\n      username: username,\n      password: password,\n      scope: this.getOption('token.scope'),\n    };\n    return this.urlEncodeParameters(this.cleanParams(this.addCredentialsToParams(params)));\n  }\n\n  protected buildAuthHeader(): any {\n    if (this.clientAuthMethod === NbOAuth2ClientAuthMethod.BASIC) {\n      if (this.getOption('clientId') && this.getOption('clientSecret')) {\n        return new HttpHeaders(\n            {\n              'Authorization': 'Basic ' + btoa(\n                this.getOption('clientId') + ':' + this.getOption('clientSecret')),\n            },\n          );\n      } else {\n        throw Error('For basic client authentication method, please provide both clientId & clientSecret.');\n      }\n    }\n  }\n\n  protected cleanParams(params: any): any {\n    Object.entries(params)\n      .forEach(([key, val]) => !val && delete params[key]);\n    return params;\n  }\n\n  protected addCredentialsToParams(params: any): any {\n    if (this.clientAuthMethod === NbOAuth2ClientAuthMethod.REQUEST_BODY) {\n      if (this.getOption('clientId') && this.getOption('clientSecret')) {\n        return {\n          ... params,\n          client_id: this.getOption('clientId'),\n          client_secret: this.getOption('clientSecret'),\n        }\n      } else {\n        throw Error('For request body client authentication method, please provide both clientId & clientSecret.')\n      }\n    }\n    return params;\n  }\n\n\n  protected handleResponseError(res: any): Observable<NbAuthResult> {\n    let errors = [];\n    if (res instanceof HttpErrorResponse) {\n      if (res.error.error_description) {\n        errors.push(res.error.error_description);\n      } else {\n        errors = this.getOption('defaultErrors');\n      }\n    }  else if (res instanceof NbAuthIllegalTokenError ) {\n      errors.push(res.message)\n    } else {\n        errors.push('Something went wrong.')\n    };\n\n    return observableOf(\n      new NbAuthResult(\n        false,\n        res,\n        this.getOption('redirect.failure'),\n        errors,\n        [],\n      ));\n  }\n\n  protected buildRedirectUrl() {\n    const params = {\n      response_type: this.getOption('authorize.responseType'),\n      client_id: this.getOption('clientId'),\n      redirect_uri: this.getOption('authorize.redirectUri'),\n      scope: this.getOption('authorize.scope'),\n      state: this.getOption('authorize.state'),\n\n      ...this.getOption('authorize.params'),\n    };\n\n    const endpoint = this.getActionEndpoint('authorize');\n    const query = this.urlEncodeParameters(this.cleanParams(params));\n\n    return `${endpoint}?${query}`;\n  }\n\n  protected parseHashAsQueryParams(hash: string): { [key: string]: string } {\n    return hash ? hash.split('&').reduce((acc: any, part: string) => {\n      const item = part.split('=');\n      acc[item[0]] = decodeURIComponent(item[1]);\n      return acc;\n    }, {}) : {};\n  }\n\n  protected urlEncodeParameters(params: any): string {\n    return Object.keys(params).map((k) => {\n      return `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`;\n    }).join('&');\n  }\n\n  protected createRefreshedToken(res, existingToken: NbAuthRefreshableToken, requireValidToken: boolean): NbAuthToken {\n    type AuthRefreshToken = NbAuthRefreshableToken & NbAuthToken;\n\n    const refreshedToken: AuthRefreshToken = this.createToken<AuthRefreshToken>(res, requireValidToken);\n    if (!refreshedToken.getRefreshToken() && existingToken.getRefreshToken()) {\n      refreshedToken.setRefreshToken(existingToken.getRefreshToken());\n    }\n    return refreshedToken;\n  }\n\n  register(data?: any): Observable<NbAuthResult> {\n    throw new Error('`register` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n  }\n\n  requestPassword(data?: any): Observable<NbAuthResult> {\n    throw new Error('`requestPassword` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n  }\n\n  resetPassword(data: any = {}): Observable<NbAuthResult> {\n    throw new Error('`resetPassword` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n  }\n\n  logout(): Observable<NbAuthResult> {\n    return observableOf(new NbAuthResult(true));\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { NbAuthToken } from './token';\nimport { NbAuthTokenParceler } from './token-parceler';\n\nexport abstract class NbTokenStorage {\n\n  abstract get(): NbAuthToken;\n  abstract set(token: NbAuthToken);\n  abstract clear();\n}\n\n/**\n * Service that uses browser localStorage as a storage.\n *\n * The token storage is provided into auth module the following way:\n * ```ts\n * { provide: NbTokenStorage, useClass: NbTokenLocalStorage },\n * ```\n *\n * If you need to change the storage behaviour or provide your own - just extend your class from basic `NbTokenStorage`\n * or `NbTokenLocalStorage` and provide in your `app.module`:\n * ```ts\n * { provide: NbTokenStorage, useClass: NbTokenCustomStorage },\n * ```\n *\n */\n@Injectable()\nexport class NbTokenLocalStorage extends NbTokenStorage {\n\n  protected key = 'auth_app_token';\n\n  constructor(private parceler: NbAuthTokenParceler) {\n    super();\n  }\n\n  /**\n   * Returns token from localStorage\n   * @returns {NbAuthToken}\n   */\n  get(): NbAuthToken {\n    const raw = localStorage.getItem(this.key);\n    return this.parceler.unwrap(raw);\n  }\n\n  /**\n   * Sets token to localStorage\n   * @param {NbAuthToken} token\n   */\n  set(token: NbAuthToken) {\n    const raw = this.parceler.wrap(token);\n    localStorage.setItem(this.key, raw);\n  }\n\n  /**\n   * Clears token from localStorage\n   */\n  clear() {\n    localStorage.removeItem(this.key);\n  }\n}\n","/**\n * Extending object that entered in first argument.\n *\n * Returns extended object or false if have no target object or incorrect type.\n *\n * If you wish to clone source object (without modify it), just use empty new\n * object as first argument, like this:\n *   deepExtend({}, yourObj_1, [yourObj_N]);\n */\nexport const deepExtend = function (...objects: any[]): any {\n  if (arguments.length < 1 || typeof arguments[0] !== 'object') {\n    return false;\n  }\n\n  if (arguments.length < 2) {\n    return arguments[0];\n  }\n\n  const target = arguments[0];\n\n  // convert arguments to array and cut off target object\n  const args = Array.prototype.slice.call(arguments, 1);\n\n  let val, src;\n\n  args.forEach(function (obj: any) {\n    // skip argument if it is array or isn't object\n    if (typeof obj !== 'object' || Array.isArray(obj)) {\n      return;\n    }\n\n    Object.keys(obj).forEach(function (key) {\n      src = target[key]; // source value\n      val = obj[key]; // new value\n\n      // recursion prevention\n      if (val === target) {\n        return;\n\n        /**\n         * if new value isn't object then just overwrite by new value\n         * instead of extending.\n         */\n      } else if (typeof val !== 'object' || val === null) {\n        target[key] = val;\n\n        return;\n\n        // just clone arrays (and recursive clone objects inside)\n      } else if (Array.isArray(val)) {\n        target[key] = deepCloneArray(val);\n\n        return;\n\n        // custom cloning and overwrite for specific objects\n      } else if (isSpecificValue(val)) {\n        target[key] = cloneSpecificValue(val);\n\n        return;\n\n        // overwrite by new value if source isn't object or array\n      } else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\n        target[key] = deepExtend({}, val);\n\n        return;\n\n        // source value and new value is objects both, extending...\n      } else {\n        target[key] = deepExtend(src, val);\n\n        return;\n      }\n    });\n  });\n\n  return target;\n};\n\nfunction isSpecificValue(val: any) {\n  return (\n    val instanceof Date\n    || val instanceof RegExp\n  ) ? true : false;\n}\n\nfunction cloneSpecificValue(val: any): any {\n  if (val instanceof Date) {\n    return new Date(val.getTime());\n  } else if (val instanceof RegExp) {\n    return new RegExp(val);\n  } else {\n    throw new Error('cloneSpecificValue: Unexpected situation');\n  }\n}\n\n/**\n * Recursive cloning array.\n */\nfunction deepCloneArray(arr: any[]): any {\n  const clone: any[] = [];\n  arr.forEach(function (item: any, index: any) {\n    if (typeof item === 'object' && item !== null) {\n      if (Array.isArray(item)) {\n        clone[index] = deepCloneArray(item);\n      } else if (isSpecificValue(item)) {\n        clone[index] = cloneSpecificValue(item);\n      } else {\n        clone[index] = deepExtend({}, item);\n      }\n    } else {\n      clone[index] = item;\n    }\n  });\n\n  return clone;\n}\n\n// getDeepFromObject({result: {data: 1}}, 'result.data', 2); // returns 1\nexport function getDeepFromObject(object = {}, name: string, defaultValue?: any) {\n  const keys = name.split('.');\n  // clone the object\n  let level = deepExtend({}, object || {});\n  keys.forEach((k) => {\n    if (level && typeof level[k] !== 'undefined') {\n      level = level[k];\n    } else {\n      level = undefined;\n    }\n  });\n\n  return typeof level === 'undefined' ? defaultValue : level;\n}\n\nexport function urlBase64Decode(str: string): string {\n  let output = str.replace(/-/g, '+').replace(/_/g, '/');\n  switch (output.length % 4) {\n    case 0: { break; }\n    case 2: { output += '=='; break; }\n    case 3: { output += '='; break; }\n    default: {\n      throw new Error('Illegal base64url string!');\n    }\n  }\n  return b64DecodeUnicode(output);\n}\n\nexport function b64decode(str: string): string {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n  let output: string = '';\n\n  str = String(str).replace(/=+$/, '');\n\n  if (str.length % 4 === 1) {\n    throw new Error(`'atob' failed: The string to be decoded is not correctly encoded.`);\n  }\n\n  for (\n    // initialize result and counters\n    let bc: number = 0, bs: any, buffer: any, idx: number = 0;\n    // get next character\n    buffer = str.charAt(idx++);\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n      // and if not first of each 4 characters,\n      // convert the first 8 bits to one ascii character\n    bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n\n// https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\nexport function b64DecodeUnicode(str: any) {\n  return decodeURIComponent(Array.prototype.map.call(b64decode(str), (c: any) => {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { NbAuthResult } from '../services/auth-result';\nimport { NbAuthStrategyOptions } from './auth-strategy-options';\nimport { deepExtend, getDeepFromObject } from '../helpers';\nimport {\n  NbAuthToken,\n  nbAuthCreateToken,\n  NbAuthIllegalTokenError,\n} from '../services/token/token';\n\nexport abstract class NbAuthStrategy {\n\n  protected defaultOptions: NbAuthStrategyOptions;\n  protected options: NbAuthStrategyOptions;\n\n  // we should keep this any and validation should be done in `register` method instead\n  // otherwise it won't be possible to pass an empty object\n  setOptions(options: any): void {\n    this.options = deepExtend({}, this.defaultOptions, options);\n  }\n\n  getOption(key: string): any {\n    return getDeepFromObject(this.options, key, null);\n  }\n\n  createToken<T extends NbAuthToken>(value: any, failWhenInvalidToken?: boolean): T {\n    const token =  nbAuthCreateToken<T>(this.getOption('token.class'), value, this.getName());\n    // At this point, nbAuthCreateToken failed with NbAuthIllegalTokenError which MUST be intercepted by strategies\n    // Or token is created. It MAY be created even if backend did not return any token, in this case it is !Valid\n    if (failWhenInvalidToken && !token.isValid()) {\n      // If we require a valid token (i.e. isValid), then we MUST throw NbAuthIllegalTokenError so that the strategies\n      // intercept it\n      throw new NbAuthIllegalTokenError('Token is empty or invalid.');\n    }\n    return token;\n  }\n\n  getName(): string {\n    return this.getOption('name');\n  }\n\n  abstract authenticate(data?: any): Observable<NbAuthResult>;\n\n  abstract register(data?: any): Observable<NbAuthResult>;\n\n  abstract requestPassword(data?: any): Observable<NbAuthResult>;\n\n  abstract resetPassword(data?: any): Observable<NbAuthResult>;\n\n  abstract logout(): Observable<NbAuthResult>;\n\n  abstract refreshToken(data?: any): Observable<NbAuthResult>;\n\n  protected createFailResponse(data?: any): HttpResponse<Object> {\n    return new HttpResponse<Object>({ body: {}, status: 401 });\n  }\n\n  protected createSuccessResponse(data?: any): HttpResponse<Object> {\n    return new HttpResponse<Object>({ body: {}, status: 200 });\n  }\n\n  protected getActionEndpoint(action: string): string {\n    const actionEndpoint: string = this.getOption(`${action}.endpoint`);\n    const baseEndpoint: string = this.getOption('baseEndpoint');\n    return actionEndpoint ? baseEndpoint + actionEndpoint : '';\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { NbAuthStrategyOptions, NbStrategyToken } from '../auth-strategy-options';\nimport { NbAuthSimpleToken } from '../../services/token/token';\n\nexport class NbDummyAuthStrategyOptions extends NbAuthStrategyOptions {\n  token?: NbStrategyToken = {\n    class: NbAuthSimpleToken,\n  };\n  delay?: number = 1000;\n  alwaysFail?: boolean = false;\n}\n\nexport const dummyStrategyOptions: NbDummyAuthStrategyOptions = new NbDummyAuthStrategyOptions();\n","export class NbUser {\n\n  constructor(public id?: number,\n              public email?: string,\n              public password?: string,\n              public rememberMe?: boolean,\n              public terms?: boolean,\n              public confirmPassword?: string,\n              public fullName?: string) {\n  }\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { nbAuthCreateToken, NbAuthToken, NbAuthTokenClass } from './token';\nimport { NB_AUTH_TOKENS } from '../../auth.options';\n\nexport interface NbTokenPack {\n  name: string,\n  ownerStrategyName: string,\n  createdAt: Number,\n  value: string,\n}\n\nexport const NB_AUTH_FALLBACK_TOKEN = new InjectionToken<NbAuthTokenClass>('Nebular Auth Options');\n\n/**\n * Creates a token parcel which could be stored/restored\n */\n@Injectable()\nexport class NbAuthTokenParceler {\n\n  constructor(@Inject(NB_AUTH_FALLBACK_TOKEN) private fallbackClass: NbAuthTokenClass,\n              @Inject(NB_AUTH_TOKENS) private tokenClasses: NbAuthTokenClass[]) {\n  }\n\n  wrap(token: NbAuthToken): string {\n    return JSON.stringify({\n      name: token.getName(),\n      ownerStrategyName: token.getOwnerStrategyName(),\n      createdAt: token.getCreatedAt().getTime(),\n      value: token.toString(),\n    });\n  }\n\n  unwrap(value: string): NbAuthToken {\n    let tokenClass: NbAuthTokenClass = this.fallbackClass;\n    let tokenValue = '';\n    let tokenOwnerStrategyName = '';\n    let tokenCreatedAt: Date = null;\n\n    const tokenPack: NbTokenPack = this.parseTokenPack(value);\n    if (tokenPack) {\n      tokenClass = this.getClassByName(tokenPack.name) || this.fallbackClass;\n      tokenValue = tokenPack.value;\n      tokenOwnerStrategyName = tokenPack.ownerStrategyName;\n      tokenCreatedAt = new Date(Number(tokenPack.createdAt));\n    }\n\n    return nbAuthCreateToken(tokenClass, tokenValue, tokenOwnerStrategyName, tokenCreatedAt);\n\n  }\n\n  // TODO: this could be moved to a separate token registry\n  protected getClassByName(name): NbAuthTokenClass {\n    return this.tokenClasses.find((tokenClass: NbAuthTokenClass) => tokenClass.NAME === name);\n  }\n\n  protected parseTokenPack(value): NbTokenPack {\n    try {\n      return JSON.parse(value);\n    } catch (e) { }\n    return null;\n  }\n}\n"],"sourceRoot":"webpack:///"}